name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Setup do ambiente virtual e instalação de dependências
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip3 install --upgrade pip
          pip3 install pip-tools
          pip-compile requirements.in
          python -m venv venv
          source venv/bin/activate
          pip3 install -r requirements.txt
          pip-sync requirements.txt
          pip3 install flake8 black pytest pytest-cov

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

  # Linting e formatação do código
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure virtual environment and dependencies
        run: |
          if [ ! -d "venv" ]; then
            echo "venv directory not found, recreating virtual environment"
            python -m venv venv
            source venv/bin/activate
            pip3 install -r requirements.txt
          else
            echo "venv found, activating"
            source venv/bin/activate
          fi
          pip3 install flake8 black

      - name: Run flake8
        run: |
          source venv/bin/activate
          flake8 src/ tests/

      - name: Check code format with Black
        run: |
          source venv/bin/activate
          black --check src/ tests/

  # Testes e cobertura de código
  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: db_gerenciador_arquivos
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use cached or recreate virtual environment
        run: |
          if [ ! -d "venv" ]; then
            echo "venv directory not found, recreating virtual environment"
            python -m venv venv
            source venv/bin/activate
            pip3 install -r requirements.txt
          else
            echo "venv found, activating"
            source venv/bin/activate
          fi

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          pip3 install pytest pytest-cov
          pytest --cov=src --cov-fail-under=80

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
