name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job para configurar o ambiente e gerenciar dependências
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Remover ambiente virtual antigo, se existir
      - name: Remove old virtual environment
        run: |
          if [ -d ".venv" ]; then
            rm -rf .venv
          fi

      # Criar novo ambiente virtual e instalar dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          pip-compile requirements.in
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip-sync requirements.txt
          pip install flake8 black pytest pytest-cov

      # Cache das dependências do pip
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache do ambiente virtual
      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

  # Job para linting e verificação de formatação
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Ensure virtual environment and dependencies
      #   run: |
      #     echo "recreating virtual environment"
      #     python -m venv .venv
      #     source .venv/bin/activate
      #     pip install -r requirements.txt

      # Verificar se o ambiente virtual foi criado corretamente
      # - name: Check virtual environment
      #   run: |
      #     if [ ! -d ".venv" ]; then
      #       echo "Virtual environment not found. Please run the setup job first."
      #       exit 1
      #     fi
      #     echo "Virtual environment found."
      #     # Verificar se o ambiente virtual está ativo
      #     if [ -z "$VIRTUAL_ENV" ]; then
      #       echo "Virtual environment not activated. Please activate the virtual environment."
      #       exit 1
      #     fi

      # Rodar o flake8 para garantir a qualidade do código
      - name: Run flake8
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install flake8
          flake8 src/* tests/*

      # Verificar a formatação do código com black
      - name: Check code format with Black
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install black
          black --check src/* tests/*

  # Job para rodar os testes e coletar cobertura de código
  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: db_gerenciador_arquivos
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use cached or recreate virtual environment
        run: |
          if [ ! -d ".venv" ]; then
            echo ".venv directory not found, recreating virtual environment"
            python -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt
          else
            echo ".venv found, activating"
            source .venv/bin/activate
          fi

      # Executar os testes com pytest e gerar cobertura
      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          pip install pytest pytest-cov
          pytest --cov=src --cov-fail-under=80

      # Fazer upload do relatório de cobertura
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
