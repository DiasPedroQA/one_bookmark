name: CI Pipeline

# This workflow is triggered on push to the main branch
# and on pull requests to the main branch.
# It is used to run the CI pipeline for the project.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job para configurar o ambiente e gerenciar dependências
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Remover ambiente virtual antigo, se existir
      - name: Remove old virtual environment
        run: |
          if [ -d ".venv" ]; then
            rm -rf .venv
          fi

      # Criar novo ambiente virtual e instalar dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          pip-compile requirements.in
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip-sync requirements.txt
          pip install flake8 black pytest pytest-cov sqlalchemy

      # Cache das dependências do pip
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache do ambiente virtual
      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

  # Job para linting e verificação de formatação
  lint:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ativar ou recriar o ambiente virtual, se necessário
      - name: Activate virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate

      # Verificar a formatação do código com black
      - name: Check code format with Black
        run: |
          source .venv/bin/activate
          black --check src/* tests/*

      # Rodar o flake8 para garantir a qualidade do código
      - name: Run flake8
        run: |
          source .venv/bin/activate
          flake8 src/* tests/*

      # Upload dos relatórios de linting
      - name: Upload lint report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: flake8.log

  # Job para rodar os testes e coletar cobertura de código
  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ativar ou recriar o ambiente virtual, se necessário
      - name: Activate virtual environment
        run: |
          if [ ! -d ".venv" ]; then
            echo "Virtual environment not found, creating .venv"
            python -m venv .venv
          fi
          source .venv/bin/activate

      # Criar banco de dados SQLite para testes
      - name: Setup SQLite database
        run: |
          echo "Configuring SQLite database for tests"
          export DATABASE_URL="sqlite:///test_database.db"

      # Executar os testes com pytest e gerar cobertura
      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          pytest --cov=src --cov-report=html --cov-fail-under=80
          cp .coverage coverage.html

      # Fazer upload do relatório de cobertura
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      # Publicar o resultado da cobertura
      # - name: Publish coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: coverage.html
      #     flags: unittests
      #     name: codecov-coverage